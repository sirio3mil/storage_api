# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigFrontendNavigation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'android_media': 'ConfigFrontendNavigationAndroidMedia',
        'ios_media': 'ConfigFrontendNavigationIosMedia',
        'wp_media': 'ConfigFrontendNavigationWpMedia'
    }

    attribute_map = {
        'android_media': 'androidMedia',
        'ios_media': 'iosMedia',
        'wp_media': 'wpMedia'
    }

    def __init__(self, android_media=None, ios_media=None, wp_media=None):  # noqa: E501
        """ConfigFrontendNavigation - a model defined in Swagger"""  # noqa: E501
        self._android_media = None
        self._ios_media = None
        self._wp_media = None
        self.discriminator = None
        self.android_media = android_media
        self.ios_media = ios_media
        self.wp_media = wp_media

    @property
    def android_media(self):
        """Gets the android_media of this ConfigFrontendNavigation.  # noqa: E501


        :return: The android_media of this ConfigFrontendNavigation.  # noqa: E501
        :rtype: ConfigFrontendNavigationAndroidMedia
        """
        return self._android_media

    @android_media.setter
    def android_media(self, android_media):
        """Sets the android_media of this ConfigFrontendNavigation.


        :param android_media: The android_media of this ConfigFrontendNavigation.  # noqa: E501
        :type: ConfigFrontendNavigationAndroidMedia
        """
        if android_media is None:
            raise ValueError("Invalid value for `android_media`, must not be `None`")  # noqa: E501

        self._android_media = android_media

    @property
    def ios_media(self):
        """Gets the ios_media of this ConfigFrontendNavigation.  # noqa: E501


        :return: The ios_media of this ConfigFrontendNavigation.  # noqa: E501
        :rtype: ConfigFrontendNavigationIosMedia
        """
        return self._ios_media

    @ios_media.setter
    def ios_media(self, ios_media):
        """Sets the ios_media of this ConfigFrontendNavigation.


        :param ios_media: The ios_media of this ConfigFrontendNavigation.  # noqa: E501
        :type: ConfigFrontendNavigationIosMedia
        """
        if ios_media is None:
            raise ValueError("Invalid value for `ios_media`, must not be `None`")  # noqa: E501

        self._ios_media = ios_media

    @property
    def wp_media(self):
        """Gets the wp_media of this ConfigFrontendNavigation.  # noqa: E501


        :return: The wp_media of this ConfigFrontendNavigation.  # noqa: E501
        :rtype: ConfigFrontendNavigationWpMedia
        """
        return self._wp_media

    @wp_media.setter
    def wp_media(self, wp_media):
        """Sets the wp_media of this ConfigFrontendNavigation.


        :param wp_media: The wp_media of this ConfigFrontendNavigation.  # noqa: E501
        :type: ConfigFrontendNavigationWpMedia
        """
        if wp_media is None:
            raise ValueError("Invalid value for `wp_media`, must not be `None`")  # noqa: E501

        self._wp_media = wp_media

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigFrontendNavigation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigFrontendNavigation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
