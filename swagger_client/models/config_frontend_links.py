# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigFrontendLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_change_password': 'bool',
        'can_change_short_url': 'bool',
        'message_edit_allowed': 'bool',
        'message_edit_enabled': 'bool',
        'social_enabled': 'bool'
    }

    attribute_map = {
        'can_change_password': 'canChangePassword',
        'can_change_short_url': 'canChangeShortUrl',
        'message_edit_allowed': 'messageEditAllowed',
        'message_edit_enabled': 'messageEditEnabled',
        'social_enabled': 'socialEnabled'
    }

    def __init__(self, can_change_password=None, can_change_short_url=None, message_edit_allowed=None, message_edit_enabled=None, social_enabled=None):  # noqa: E501
        """ConfigFrontendLinks - a model defined in Swagger"""  # noqa: E501
        self._can_change_password = None
        self._can_change_short_url = None
        self._message_edit_allowed = None
        self._message_edit_enabled = None
        self._social_enabled = None
        self.discriminator = None
        self.can_change_password = can_change_password
        self.can_change_short_url = can_change_short_url
        self.message_edit_allowed = message_edit_allowed
        self.message_edit_enabled = message_edit_enabled
        self.social_enabled = social_enabled

    @property
    def can_change_password(self):
        """Gets the can_change_password of this ConfigFrontendLinks.  # noqa: E501

        CanChangePassword defines whether link passwords can be changed.  # noqa: E501

        :return: The can_change_password of this ConfigFrontendLinks.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_password

    @can_change_password.setter
    def can_change_password(self, can_change_password):
        """Sets the can_change_password of this ConfigFrontendLinks.

        CanChangePassword defines whether link passwords can be changed.  # noqa: E501

        :param can_change_password: The can_change_password of this ConfigFrontendLinks.  # noqa: E501
        :type: bool
        """
        if can_change_password is None:
            raise ValueError("Invalid value for `can_change_password`, must not be `None`")  # noqa: E501

        self._can_change_password = can_change_password

    @property
    def can_change_short_url(self):
        """Gets the can_change_short_url of this ConfigFrontendLinks.  # noqa: E501

        CanChangeShortUrl defines whether short URLs can be changed.  # noqa: E501

        :return: The can_change_short_url of this ConfigFrontendLinks.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_short_url

    @can_change_short_url.setter
    def can_change_short_url(self, can_change_short_url):
        """Sets the can_change_short_url of this ConfigFrontendLinks.

        CanChangeShortUrl defines whether short URLs can be changed.  # noqa: E501

        :param can_change_short_url: The can_change_short_url of this ConfigFrontendLinks.  # noqa: E501
        :type: bool
        """
        if can_change_short_url is None:
            raise ValueError("Invalid value for `can_change_short_url`, must not be `None`")  # noqa: E501

        self._can_change_short_url = can_change_short_url

    @property
    def message_edit_allowed(self):
        """Gets the message_edit_allowed of this ConfigFrontendLinks.  # noqa: E501

        MessageEditEnabled defines whether current user is allowed to set a custom link message.  # noqa: E501

        :return: The message_edit_allowed of this ConfigFrontendLinks.  # noqa: E501
        :rtype: bool
        """
        return self._message_edit_allowed

    @message_edit_allowed.setter
    def message_edit_allowed(self, message_edit_allowed):
        """Sets the message_edit_allowed of this ConfigFrontendLinks.

        MessageEditEnabled defines whether current user is allowed to set a custom link message.  # noqa: E501

        :param message_edit_allowed: The message_edit_allowed of this ConfigFrontendLinks.  # noqa: E501
        :type: bool
        """
        if message_edit_allowed is None:
            raise ValueError("Invalid value for `message_edit_allowed`, must not be `None`")  # noqa: E501

        self._message_edit_allowed = message_edit_allowed

    @property
    def message_edit_enabled(self):
        """Gets the message_edit_enabled of this ConfigFrontendLinks.  # noqa: E501

        MessageEditEnabled defines whether custom link message feature is enabled.  # noqa: E501

        :return: The message_edit_enabled of this ConfigFrontendLinks.  # noqa: E501
        :rtype: bool
        """
        return self._message_edit_enabled

    @message_edit_enabled.setter
    def message_edit_enabled(self, message_edit_enabled):
        """Sets the message_edit_enabled of this ConfigFrontendLinks.

        MessageEditEnabled defines whether custom link message feature is enabled.  # noqa: E501

        :param message_edit_enabled: The message_edit_enabled of this ConfigFrontendLinks.  # noqa: E501
        :type: bool
        """
        if message_edit_enabled is None:
            raise ValueError("Invalid value for `message_edit_enabled`, must not be `None`")  # noqa: E501

        self._message_edit_enabled = message_edit_enabled

    @property
    def social_enabled(self):
        """Gets the social_enabled of this ConfigFrontendLinks.  # noqa: E501

        SocialEnabled defines whether social media buttons are displayed.  # noqa: E501

        :return: The social_enabled of this ConfigFrontendLinks.  # noqa: E501
        :rtype: bool
        """
        return self._social_enabled

    @social_enabled.setter
    def social_enabled(self, social_enabled):
        """Sets the social_enabled of this ConfigFrontendLinks.

        SocialEnabled defines whether social media buttons are displayed.  # noqa: E501

        :param social_enabled: The social_enabled of this ConfigFrontendLinks.  # noqa: E501
        :type: bool
        """
        if social_enabled is None:
            raise ValueError("Invalid value for `social_enabled`, must not be `None`")  # noqa: E501

        self._social_enabled = social_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigFrontendLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigFrontendLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
