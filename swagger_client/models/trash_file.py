# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrashFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'str',
        'deleted': 'int',
        'mount_id': 'str',
        'name': 'str',
        'path': 'str',
        'size': 'int',
        'tags': 'dict(str, list[str])',
        'version_id': 'str'
    }

    attribute_map = {
        'content_type': 'contentType',
        'deleted': 'deleted',
        'mount_id': 'mountId',
        'name': 'name',
        'path': 'path',
        'size': 'size',
        'tags': 'tags',
        'version_id': 'versionId'
    }

    def __init__(self, content_type=None, deleted=None, mount_id=None, name=None, path=None, size=None, tags=None, version_id=None):  # noqa: E501
        """TrashFile - a model defined in Swagger"""  # noqa: E501
        self._content_type = None
        self._deleted = None
        self._mount_id = None
        self._name = None
        self._path = None
        self._size = None
        self._tags = None
        self._version_id = None
        self.discriminator = None
        self.content_type = content_type
        self.deleted = deleted
        self.mount_id = mount_id
        self.name = name
        self.path = path
        self.size = size
        self.tags = tags
        self.version_id = version_id

    @property
    def content_type(self):
        """Gets the content_type of this TrashFile.  # noqa: E501


        :return: The content_type of this TrashFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this TrashFile.


        :param content_type: The content_type of this TrashFile.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def deleted(self):
        """Gets the deleted of this TrashFile.  # noqa: E501


        :return: The deleted of this TrashFile.  # noqa: E501
        :rtype: int
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TrashFile.


        :param deleted: The deleted of this TrashFile.  # noqa: E501
        :type: int
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def mount_id(self):
        """Gets the mount_id of this TrashFile.  # noqa: E501


        :return: The mount_id of this TrashFile.  # noqa: E501
        :rtype: str
        """
        return self._mount_id

    @mount_id.setter
    def mount_id(self, mount_id):
        """Sets the mount_id of this TrashFile.


        :param mount_id: The mount_id of this TrashFile.  # noqa: E501
        :type: str
        """
        if mount_id is None:
            raise ValueError("Invalid value for `mount_id`, must not be `None`")  # noqa: E501

        self._mount_id = mount_id

    @property
    def name(self):
        """Gets the name of this TrashFile.  # noqa: E501


        :return: The name of this TrashFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrashFile.


        :param name: The name of this TrashFile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this TrashFile.  # noqa: E501


        :return: The path of this TrashFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TrashFile.


        :param path: The path of this TrashFile.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def size(self):
        """Gets the size of this TrashFile.  # noqa: E501


        :return: The size of this TrashFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TrashFile.


        :param size: The size of this TrashFile.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def tags(self):
        """Gets the tags of this TrashFile.  # noqa: E501


        :return: The tags of this TrashFile.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TrashFile.


        :param tags: The tags of this TrashFile.  # noqa: E501
        :type: dict(str, list[str])
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def version_id(self):
        """Gets the version_id of this TrashFile.  # noqa: E501


        :return: The version_id of this TrashFile.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this TrashFile.


        :param version_id: The version_id of this TrashFile.  # noqa: E501
        :type: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrashFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrashFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
