# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Mount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'almost_over_quota': 'bool',
        'can_upload': 'bool',
        'can_write': 'bool',
        'capabilities': 'MountCapabilities',
        'device_id': 'str',
        'groups': 'list[MountGroup]',
        'id': 'str',
        'is_dir': 'bool',
        'is_primary': 'bool',
        'is_shared': 'bool',
        'name': 'str',
        'online': 'bool',
        'origin': 'str',
        'over_quota': 'bool',
        'owner': 'MountMember',
        'permissions': 'dict(str, bool)',
        'root': 'MountRoot',
        'space_total': 'int',
        'space_used': 'int',
        'type': 'str',
        'user_added': 'int',
        'users': 'list[MountUser]',
        'version': 'int'
    }

    attribute_map = {
        'almost_over_quota': 'almostOverQuota',
        'can_upload': 'canUpload',
        'can_write': 'canWrite',
        'capabilities': 'capabilities',
        'device_id': 'deviceId',
        'groups': 'groups',
        'id': 'id',
        'is_dir': 'isDir',
        'is_primary': 'isPrimary',
        'is_shared': 'isShared',
        'name': 'name',
        'online': 'online',
        'origin': 'origin',
        'over_quota': 'overQuota',
        'owner': 'owner',
        'permissions': 'permissions',
        'root': 'root',
        'space_total': 'spaceTotal',
        'space_used': 'spaceUsed',
        'type': 'type',
        'user_added': 'userAdded',
        'users': 'users',
        'version': 'version'
    }

    def __init__(self, almost_over_quota=None, can_upload=None, can_write=None, capabilities=None, device_id=None, groups=None, id=None, is_dir=None, is_primary=None, is_shared=None, name=None, online=None, origin=None, over_quota=None, owner=None, permissions=None, root=None, space_total=None, space_used=None, type=None, user_added=None, users=None, version=None):  # noqa: E501
        """Mount - a model defined in Swagger"""  # noqa: E501
        self._almost_over_quota = None
        self._can_upload = None
        self._can_write = None
        self._capabilities = None
        self._device_id = None
        self._groups = None
        self._id = None
        self._is_dir = None
        self._is_primary = None
        self._is_shared = None
        self._name = None
        self._online = None
        self._origin = None
        self._over_quota = None
        self._owner = None
        self._permissions = None
        self._root = None
        self._space_total = None
        self._space_used = None
        self._type = None
        self._user_added = None
        self._users = None
        self._version = None
        self.discriminator = None
        self.almost_over_quota = almost_over_quota
        self.can_upload = can_upload
        self.can_write = can_write
        self.capabilities = capabilities
        if device_id is not None:
            self.device_id = device_id
        self.groups = groups
        self.id = id
        self.is_dir = is_dir
        self.is_primary = is_primary
        self.is_shared = is_shared
        self.name = name
        self.online = online
        self.origin = origin
        self.over_quota = over_quota
        self.owner = owner
        self.permissions = permissions
        if root is not None:
            self.root = root
        if space_total is not None:
            self.space_total = space_total
        if space_used is not None:
            self.space_used = space_used
        self.type = type
        self.user_added = user_added
        self.users = users
        self.version = version

    @property
    def almost_over_quota(self):
        """Gets the almost_over_quota of this Mount.  # noqa: E501


        :return: The almost_over_quota of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._almost_over_quota

    @almost_over_quota.setter
    def almost_over_quota(self, almost_over_quota):
        """Sets the almost_over_quota of this Mount.


        :param almost_over_quota: The almost_over_quota of this Mount.  # noqa: E501
        :type: bool
        """
        if almost_over_quota is None:
            raise ValueError("Invalid value for `almost_over_quota`, must not be `None`")  # noqa: E501

        self._almost_over_quota = almost_over_quota

    @property
    def can_upload(self):
        """Gets the can_upload of this Mount.  # noqa: E501


        :return: The can_upload of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._can_upload

    @can_upload.setter
    def can_upload(self, can_upload):
        """Sets the can_upload of this Mount.


        :param can_upload: The can_upload of this Mount.  # noqa: E501
        :type: bool
        """
        if can_upload is None:
            raise ValueError("Invalid value for `can_upload`, must not be `None`")  # noqa: E501

        self._can_upload = can_upload

    @property
    def can_write(self):
        """Gets the can_write of this Mount.  # noqa: E501


        :return: The can_write of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._can_write

    @can_write.setter
    def can_write(self, can_write):
        """Sets the can_write of this Mount.


        :param can_write: The can_write of this Mount.  # noqa: E501
        :type: bool
        """
        if can_write is None:
            raise ValueError("Invalid value for `can_write`, must not be `None`")  # noqa: E501

        self._can_write = can_write

    @property
    def capabilities(self):
        """Gets the capabilities of this Mount.  # noqa: E501


        :return: The capabilities of this Mount.  # noqa: E501
        :rtype: MountCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Mount.


        :param capabilities: The capabilities of this Mount.  # noqa: E501
        :type: MountCapabilities
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")  # noqa: E501

        self._capabilities = capabilities

    @property
    def device_id(self):
        """Gets the device_id of this Mount.  # noqa: E501


        :return: The device_id of this Mount.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Mount.


        :param device_id: The device_id of this Mount.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def groups(self):
        """Gets the groups of this Mount.  # noqa: E501


        :return: The groups of this Mount.  # noqa: E501
        :rtype: list[MountGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Mount.


        :param groups: The groups of this Mount.  # noqa: E501
        :type: list[MountGroup]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")  # noqa: E501

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this Mount.  # noqa: E501


        :return: The id of this Mount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Mount.


        :param id: The id of this Mount.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_dir(self):
        """Gets the is_dir of this Mount.  # noqa: E501


        :return: The is_dir of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir

    @is_dir.setter
    def is_dir(self, is_dir):
        """Sets the is_dir of this Mount.


        :param is_dir: The is_dir of this Mount.  # noqa: E501
        :type: bool
        """
        if is_dir is None:
            raise ValueError("Invalid value for `is_dir`, must not be `None`")  # noqa: E501

        self._is_dir = is_dir

    @property
    def is_primary(self):
        """Gets the is_primary of this Mount.  # noqa: E501


        :return: The is_primary of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this Mount.


        :param is_primary: The is_primary of this Mount.  # noqa: E501
        :type: bool
        """
        if is_primary is None:
            raise ValueError("Invalid value for `is_primary`, must not be `None`")  # noqa: E501

        self._is_primary = is_primary

    @property
    def is_shared(self):
        """Gets the is_shared of this Mount.  # noqa: E501


        :return: The is_shared of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this Mount.


        :param is_shared: The is_shared of this Mount.  # noqa: E501
        :type: bool
        """
        if is_shared is None:
            raise ValueError("Invalid value for `is_shared`, must not be `None`")  # noqa: E501

        self._is_shared = is_shared

    @property
    def name(self):
        """Gets the name of this Mount.  # noqa: E501


        :return: The name of this Mount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mount.


        :param name: The name of this Mount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def online(self):
        """Gets the online of this Mount.  # noqa: E501


        :return: The online of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this Mount.


        :param online: The online of this Mount.  # noqa: E501
        :type: bool
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online

    @property
    def origin(self):
        """Gets the origin of this Mount.  # noqa: E501


        :return: The origin of this Mount.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Mount.


        :param origin: The origin of this Mount.  # noqa: E501
        :type: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def over_quota(self):
        """Gets the over_quota of this Mount.  # noqa: E501


        :return: The over_quota of this Mount.  # noqa: E501
        :rtype: bool
        """
        return self._over_quota

    @over_quota.setter
    def over_quota(self, over_quota):
        """Sets the over_quota of this Mount.


        :param over_quota: The over_quota of this Mount.  # noqa: E501
        :type: bool
        """
        if over_quota is None:
            raise ValueError("Invalid value for `over_quota`, must not be `None`")  # noqa: E501

        self._over_quota = over_quota

    @property
    def owner(self):
        """Gets the owner of this Mount.  # noqa: E501


        :return: The owner of this Mount.  # noqa: E501
        :rtype: MountMember
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Mount.


        :param owner: The owner of this Mount.  # noqa: E501
        :type: MountMember
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this Mount.  # noqa: E501


        :return: The permissions of this Mount.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Mount.


        :param permissions: The permissions of this Mount.  # noqa: E501
        :type: dict(str, bool)
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def root(self):
        """Gets the root of this Mount.  # noqa: E501


        :return: The root of this Mount.  # noqa: E501
        :rtype: MountRoot
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this Mount.


        :param root: The root of this Mount.  # noqa: E501
        :type: MountRoot
        """

        self._root = root

    @property
    def space_total(self):
        """Gets the space_total of this Mount.  # noqa: E501


        :return: The space_total of this Mount.  # noqa: E501
        :rtype: int
        """
        return self._space_total

    @space_total.setter
    def space_total(self, space_total):
        """Sets the space_total of this Mount.


        :param space_total: The space_total of this Mount.  # noqa: E501
        :type: int
        """

        self._space_total = space_total

    @property
    def space_used(self):
        """Gets the space_used of this Mount.  # noqa: E501


        :return: The space_used of this Mount.  # noqa: E501
        :rtype: int
        """
        return self._space_used

    @space_used.setter
    def space_used(self, space_used):
        """Sets the space_used of this Mount.


        :param space_used: The space_used of this Mount.  # noqa: E501
        :type: int
        """

        self._space_used = space_used

    @property
    def type(self):
        """Gets the type of this Mount.  # noqa: E501


        :return: The type of this Mount.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Mount.


        :param type: The type of this Mount.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def user_added(self):
        """Gets the user_added of this Mount.  # noqa: E501


        :return: The user_added of this Mount.  # noqa: E501
        :rtype: int
        """
        return self._user_added

    @user_added.setter
    def user_added(self, user_added):
        """Sets the user_added of this Mount.


        :param user_added: The user_added of this Mount.  # noqa: E501
        :type: int
        """
        if user_added is None:
            raise ValueError("Invalid value for `user_added`, must not be `None`")  # noqa: E501

        self._user_added = user_added

    @property
    def users(self):
        """Gets the users of this Mount.  # noqa: E501


        :return: The users of this Mount.  # noqa: E501
        :rtype: list[MountUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Mount.


        :param users: The users of this Mount.  # noqa: E501
        :type: list[MountUser]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def version(self):
        """Gets the version of this Mount.  # noqa: E501


        :return: The version of this Mount.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Mount.


        :param version: The version of this Mount.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
