# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'id': 'str',
        'last_name': 'str',
        'permissions': 'dict(str, bool)',
        'phone_number': 'str',
        'space_total': 'int',
        'space_used': 'int'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'firstName',
        'id': 'id',
        'last_name': 'lastName',
        'permissions': 'permissions',
        'phone_number': 'phoneNumber',
        'space_total': 'spaceTotal',
        'space_used': 'spaceUsed'
    }

    def __init__(self, email=None, first_name=None, id=None, last_name=None, permissions=None, phone_number=None, space_total=None, space_used=None):  # noqa: E501
        """GroupUser - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._first_name = None
        self._id = None
        self._last_name = None
        self._permissions = None
        self._phone_number = None
        self._space_total = None
        self._space_used = None
        self.discriminator = None
        self.email = email
        self.first_name = first_name
        self.id = id
        self.last_name = last_name
        self.permissions = permissions
        if phone_number is not None:
            self.phone_number = phone_number
        if space_total is not None:
            self.space_total = space_total
        if space_used is not None:
            self.space_used = space_used

    @property
    def email(self):
        """Gets the email of this GroupUser.  # noqa: E501


        :return: The email of this GroupUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GroupUser.


        :param email: The email of this GroupUser.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this GroupUser.  # noqa: E501


        :return: The first_name of this GroupUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GroupUser.


        :param first_name: The first_name of this GroupUser.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this GroupUser.  # noqa: E501


        :return: The id of this GroupUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupUser.


        :param id: The id of this GroupUser.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this GroupUser.  # noqa: E501


        :return: The last_name of this GroupUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GroupUser.


        :param last_name: The last_name of this GroupUser.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def permissions(self):
        """Gets the permissions of this GroupUser.  # noqa: E501


        :return: The permissions of this GroupUser.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GroupUser.


        :param permissions: The permissions of this GroupUser.  # noqa: E501
        :type: dict(str, bool)
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def phone_number(self):
        """Gets the phone_number of this GroupUser.  # noqa: E501


        :return: The phone_number of this GroupUser.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GroupUser.


        :param phone_number: The phone_number of this GroupUser.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def space_total(self):
        """Gets the space_total of this GroupUser.  # noqa: E501


        :return: The space_total of this GroupUser.  # noqa: E501
        :rtype: int
        """
        return self._space_total

    @space_total.setter
    def space_total(self, space_total):
        """Sets the space_total of this GroupUser.


        :param space_total: The space_total of this GroupUser.  # noqa: E501
        :type: int
        """

        self._space_total = space_total

    @property
    def space_used(self):
        """Gets the space_used of this GroupUser.  # noqa: E501


        :return: The space_used of this GroupUser.  # noqa: E501
        :rtype: int
        """
        return self._space_used

    @space_used.setter
    def space_used(self, space_used):
        """Sets the space_used of this GroupUser.


        :param space_used: The space_used of this GroupUser.  # noqa: E501
        :type: int
        """

        self._space_used = space_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
