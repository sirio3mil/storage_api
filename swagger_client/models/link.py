# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counter': 'int',
        'has_password': 'bool',
        'hash': 'str',
        'host': 'str',
        'id': 'str',
        'message': 'str',
        'mount_id': 'str',
        'name': 'str',
        'password': 'str',
        'password_required': 'bool',
        'path': 'str',
        'short_url': 'str',
        'url': 'str',
        'valid_from': 'int',
        'valid_to': 'int'
    }

    attribute_map = {
        'counter': 'counter',
        'has_password': 'hasPassword',
        'hash': 'hash',
        'host': 'host',
        'id': 'id',
        'message': 'message',
        'mount_id': 'mountId',
        'name': 'name',
        'password': 'password',
        'password_required': 'passwordRequired',
        'path': 'path',
        'short_url': 'shortUrl',
        'url': 'url',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }

    def __init__(self, counter=None, has_password=None, hash=None, host=None, id=None, message=None, mount_id=None, name=None, password=None, password_required=None, path=None, short_url=None, url=None, valid_from=None, valid_to=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        self._counter = None
        self._has_password = None
        self._hash = None
        self._host = None
        self._id = None
        self._message = None
        self._mount_id = None
        self._name = None
        self._password = None
        self._password_required = None
        self._path = None
        self._short_url = None
        self._url = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        self.counter = counter
        self.has_password = has_password
        self.hash = hash
        self.host = host
        self.id = id
        if message is not None:
            self.message = message
        self.mount_id = mount_id
        self.name = name
        if password is not None:
            self.password = password
        self.password_required = password_required
        self.path = path
        self.short_url = short_url
        self.url = url
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def counter(self):
        """Gets the counter of this Link.  # noqa: E501


        :return: The counter of this Link.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this Link.


        :param counter: The counter of this Link.  # noqa: E501
        :type: int
        """
        if counter is None:
            raise ValueError("Invalid value for `counter`, must not be `None`")  # noqa: E501

        self._counter = counter

    @property
    def has_password(self):
        """Gets the has_password of this Link.  # noqa: E501


        :return: The has_password of this Link.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this Link.


        :param has_password: The has_password of this Link.  # noqa: E501
        :type: bool
        """
        if has_password is None:
            raise ValueError("Invalid value for `has_password`, must not be `None`")  # noqa: E501

        self._has_password = has_password

    @property
    def hash(self):
        """Gets the hash of this Link.  # noqa: E501


        :return: The hash of this Link.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Link.


        :param hash: The hash of this Link.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def host(self):
        """Gets the host of this Link.  # noqa: E501


        :return: The host of this Link.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Link.


        :param host: The host of this Link.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def id(self):
        """Gets the id of this Link.  # noqa: E501


        :return: The id of this Link.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Link.


        :param id: The id of this Link.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def message(self):
        """Gets the message of this Link.  # noqa: E501


        :return: The message of this Link.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Link.


        :param message: The message of this Link.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def mount_id(self):
        """Gets the mount_id of this Link.  # noqa: E501


        :return: The mount_id of this Link.  # noqa: E501
        :rtype: str
        """
        return self._mount_id

    @mount_id.setter
    def mount_id(self, mount_id):
        """Sets the mount_id of this Link.


        :param mount_id: The mount_id of this Link.  # noqa: E501
        :type: str
        """
        if mount_id is None:
            raise ValueError("Invalid value for `mount_id`, must not be `None`")  # noqa: E501

        self._mount_id = mount_id

    @property
    def name(self):
        """Gets the name of this Link.  # noqa: E501


        :return: The name of this Link.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Link.


        :param name: The name of this Link.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this Link.  # noqa: E501


        :return: The password of this Link.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Link.


        :param password: The password of this Link.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_required(self):
        """Gets the password_required of this Link.  # noqa: E501


        :return: The password_required of this Link.  # noqa: E501
        :rtype: bool
        """
        return self._password_required

    @password_required.setter
    def password_required(self, password_required):
        """Sets the password_required of this Link.


        :param password_required: The password_required of this Link.  # noqa: E501
        :type: bool
        """
        if password_required is None:
            raise ValueError("Invalid value for `password_required`, must not be `None`")  # noqa: E501

        self._password_required = password_required

    @property
    def path(self):
        """Gets the path of this Link.  # noqa: E501


        :return: The path of this Link.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Link.


        :param path: The path of this Link.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def short_url(self):
        """Gets the short_url of this Link.  # noqa: E501


        :return: The short_url of this Link.  # noqa: E501
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """Sets the short_url of this Link.


        :param short_url: The short_url of this Link.  # noqa: E501
        :type: str
        """
        if short_url is None:
            raise ValueError("Invalid value for `short_url`, must not be `None`")  # noqa: E501

        self._short_url = short_url

    @property
    def url(self):
        """Gets the url of this Link.  # noqa: E501


        :return: The url of this Link.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Link.


        :param url: The url of this Link.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def valid_from(self):
        """Gets the valid_from of this Link.  # noqa: E501


        :return: The valid_from of this Link.  # noqa: E501
        :rtype: int
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this Link.


        :param valid_from: The valid_from of this Link.  # noqa: E501
        :type: int
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this Link.  # noqa: E501


        :return: The valid_to of this Link.  # noqa: E501
        :rtype: int
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this Link.


        :param valid_to: The valid_to of this Link.  # noqa: E501
        :type: int
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
