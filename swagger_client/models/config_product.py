# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketing_url': 'str',
        'name': 'str',
        'name_visible': 'bool'
    }

    attribute_map = {
        'marketing_url': 'marketingUrl',
        'name': 'name',
        'name_visible': 'nameVisible'
    }

    def __init__(self, marketing_url=None, name=None, name_visible=None):  # noqa: E501
        """ConfigProduct - a model defined in Swagger"""  # noqa: E501
        self._marketing_url = None
        self._name = None
        self._name_visible = None
        self.discriminator = None
        self.marketing_url = marketing_url
        self.name = name
        self.name_visible = name_visible

    @property
    def marketing_url(self):
        """Gets the marketing_url of this ConfigProduct.  # noqa: E501

        MarketingUrl is the URL of the page that contains more info about the product. It is used for intro modal in the web application and in the link page footer.  # noqa: E501

        :return: The marketing_url of this ConfigProduct.  # noqa: E501
        :rtype: str
        """
        return self._marketing_url

    @marketing_url.setter
    def marketing_url(self, marketing_url):
        """Sets the marketing_url of this ConfigProduct.

        MarketingUrl is the URL of the page that contains more info about the product. It is used for intro modal in the web application and in the link page footer.  # noqa: E501

        :param marketing_url: The marketing_url of this ConfigProduct.  # noqa: E501
        :type: str
        """
        if marketing_url is None:
            raise ValueError("Invalid value for `marketing_url`, must not be `None`")  # noqa: E501

        self._marketing_url = marketing_url

    @property
    def name(self):
        """Gets the name of this ConfigProduct.  # noqa: E501

        Name is the produt name.  # noqa: E501

        :return: The name of this ConfigProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigProduct.

        Name is the produt name.  # noqa: E501

        :param name: The name of this ConfigProduct.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name_visible(self):
        """Gets the name_visible of this ConfigProduct.  # noqa: E501

        NameVisible defines whether product name should be visible on auth pages.  # noqa: E501

        :return: The name_visible of this ConfigProduct.  # noqa: E501
        :rtype: bool
        """
        return self._name_visible

    @name_visible.setter
    def name_visible(self, name_visible):
        """Sets the name_visible of this ConfigProduct.

        NameVisible defines whether product name should be visible on auth pages.  # noqa: E501

        :param name_visible: The name_visible of this ConfigProduct.  # noqa: E501
        :type: bool
        """
        if name_visible is None:
            raise ValueError("Invalid value for `name_visible`, must not be `None`")  # noqa: E501

        self._name_visible = name_visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
