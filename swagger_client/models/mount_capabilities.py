# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MountCapabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_links': 'bool',
        'external_status': 'bool',
        'office_online': 'bool',
        'raw_thumbnails': 'bool',
        'tags': 'bool'
    }

    attribute_map = {
        'external_links': 'externalLinks',
        'external_status': 'externalStatus',
        'office_online': 'officeOnline',
        'raw_thumbnails': 'rawThumbnails',
        'tags': 'tags'
    }

    def __init__(self, external_links=None, external_status=None, office_online=None, raw_thumbnails=None, tags=None):  # noqa: E501
        """MountCapabilities - a model defined in Swagger"""  # noqa: E501
        self._external_links = None
        self._external_status = None
        self._office_online = None
        self._raw_thumbnails = None
        self._tags = None
        self.discriminator = None
        self.external_links = external_links
        self.external_status = external_status
        self.office_online = office_online
        self.raw_thumbnails = raw_thumbnails
        self.tags = tags

    @property
    def external_links(self):
        """Gets the external_links of this MountCapabilities.  # noqa: E501


        :return: The external_links of this MountCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this MountCapabilities.


        :param external_links: The external_links of this MountCapabilities.  # noqa: E501
        :type: bool
        """
        if external_links is None:
            raise ValueError("Invalid value for `external_links`, must not be `None`")  # noqa: E501

        self._external_links = external_links

    @property
    def external_status(self):
        """Gets the external_status of this MountCapabilities.  # noqa: E501


        :return: The external_status of this MountCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._external_status

    @external_status.setter
    def external_status(self, external_status):
        """Sets the external_status of this MountCapabilities.


        :param external_status: The external_status of this MountCapabilities.  # noqa: E501
        :type: bool
        """
        if external_status is None:
            raise ValueError("Invalid value for `external_status`, must not be `None`")  # noqa: E501

        self._external_status = external_status

    @property
    def office_online(self):
        """Gets the office_online of this MountCapabilities.  # noqa: E501


        :return: The office_online of this MountCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._office_online

    @office_online.setter
    def office_online(self, office_online):
        """Sets the office_online of this MountCapabilities.


        :param office_online: The office_online of this MountCapabilities.  # noqa: E501
        :type: bool
        """
        if office_online is None:
            raise ValueError("Invalid value for `office_online`, must not be `None`")  # noqa: E501

        self._office_online = office_online

    @property
    def raw_thumbnails(self):
        """Gets the raw_thumbnails of this MountCapabilities.  # noqa: E501


        :return: The raw_thumbnails of this MountCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._raw_thumbnails

    @raw_thumbnails.setter
    def raw_thumbnails(self, raw_thumbnails):
        """Sets the raw_thumbnails of this MountCapabilities.


        :param raw_thumbnails: The raw_thumbnails of this MountCapabilities.  # noqa: E501
        :type: bool
        """
        if raw_thumbnails is None:
            raise ValueError("Invalid value for `raw_thumbnails`, must not be `None`")  # noqa: E501

        self._raw_thumbnails = raw_thumbnails

    @property
    def tags(self):
        """Gets the tags of this MountCapabilities.  # noqa: E501


        :return: The tags of this MountCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this MountCapabilities.


        :param tags: The tags of this MountCapabilities.  # noqa: E501
        :type: bool
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountCapabilities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountCapabilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
