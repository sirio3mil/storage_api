# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilesCopy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'if_hash': 'str',
        'if_modified': 'int',
        'if_size': 'int',
        'modified': 'int',
        'to_mount_id': 'str',
        'to_path': 'str'
    }

    attribute_map = {
        'if_hash': 'ifHash',
        'if_modified': 'ifModified',
        'if_size': 'ifSize',
        'modified': 'modified',
        'to_mount_id': 'toMountId',
        'to_path': 'toPath'
    }

    def __init__(self, if_hash=None, if_modified=None, if_size=None, modified=None, to_mount_id=None, to_path=None):  # noqa: E501
        """FilesCopy - a model defined in Swagger"""  # noqa: E501
        self._if_hash = None
        self._if_modified = None
        self._if_size = None
        self._modified = None
        self._to_mount_id = None
        self._to_path = None
        self.discriminator = None
        if if_hash is not None:
            self.if_hash = if_hash
        if if_modified is not None:
            self.if_modified = if_modified
        if if_size is not None:
            self.if_size = if_size
        if modified is not None:
            self.modified = modified
        self.to_mount_id = to_mount_id
        self.to_path = to_path

    @property
    def if_hash(self):
        """Gets the if_hash of this FilesCopy.  # noqa: E501


        :return: The if_hash of this FilesCopy.  # noqa: E501
        :rtype: str
        """
        return self._if_hash

    @if_hash.setter
    def if_hash(self, if_hash):
        """Sets the if_hash of this FilesCopy.


        :param if_hash: The if_hash of this FilesCopy.  # noqa: E501
        :type: str
        """

        self._if_hash = if_hash

    @property
    def if_modified(self):
        """Gets the if_modified of this FilesCopy.  # noqa: E501


        :return: The if_modified of this FilesCopy.  # noqa: E501
        :rtype: int
        """
        return self._if_modified

    @if_modified.setter
    def if_modified(self, if_modified):
        """Sets the if_modified of this FilesCopy.


        :param if_modified: The if_modified of this FilesCopy.  # noqa: E501
        :type: int
        """

        self._if_modified = if_modified

    @property
    def if_size(self):
        """Gets the if_size of this FilesCopy.  # noqa: E501


        :return: The if_size of this FilesCopy.  # noqa: E501
        :rtype: int
        """
        return self._if_size

    @if_size.setter
    def if_size(self, if_size):
        """Sets the if_size of this FilesCopy.


        :param if_size: The if_size of this FilesCopy.  # noqa: E501
        :type: int
        """

        self._if_size = if_size

    @property
    def modified(self):
        """Gets the modified of this FilesCopy.  # noqa: E501


        :return: The modified of this FilesCopy.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this FilesCopy.


        :param modified: The modified of this FilesCopy.  # noqa: E501
        :type: int
        """

        self._modified = modified

    @property
    def to_mount_id(self):
        """Gets the to_mount_id of this FilesCopy.  # noqa: E501


        :return: The to_mount_id of this FilesCopy.  # noqa: E501
        :rtype: str
        """
        return self._to_mount_id

    @to_mount_id.setter
    def to_mount_id(self, to_mount_id):
        """Sets the to_mount_id of this FilesCopy.


        :param to_mount_id: The to_mount_id of this FilesCopy.  # noqa: E501
        :type: str
        """
        if to_mount_id is None:
            raise ValueError("Invalid value for `to_mount_id`, must not be `None`")  # noqa: E501

        self._to_mount_id = to_mount_id

    @property
    def to_path(self):
        """Gets the to_path of this FilesCopy.  # noqa: E501


        :return: The to_path of this FilesCopy.  # noqa: E501
        :rtype: str
        """
        return self._to_path

    @to_path.setter
    def to_path(self, to_path):
        """Sets the to_path of this FilesCopy.


        :param to_path: The to_path of this FilesCopy.  # noqa: E501
        :type: str
        """
        if to_path is None:
            raise ValueError("Invalid value for `to_path`, must not be `None`")  # noqa: E501

        self._to_path = to_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesCopy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesCopy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
