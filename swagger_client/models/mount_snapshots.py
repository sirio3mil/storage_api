# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MountSnapshots(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mount_id': 'str',
        'mount_name': 'str',
        'mount_space_total': 'int',
        'snapshots': 'list[Snapshot]'
    }

    attribute_map = {
        'mount_id': 'mountId',
        'mount_name': 'mountName',
        'mount_space_total': 'mountSpaceTotal',
        'snapshots': 'snapshots'
    }

    def __init__(self, mount_id=None, mount_name=None, mount_space_total=None, snapshots=None):  # noqa: E501
        """MountSnapshots - a model defined in Swagger"""  # noqa: E501
        self._mount_id = None
        self._mount_name = None
        self._mount_space_total = None
        self._snapshots = None
        self.discriminator = None
        self.mount_id = mount_id
        self.mount_name = mount_name
        self.mount_space_total = mount_space_total
        self.snapshots = snapshots

    @property
    def mount_id(self):
        """Gets the mount_id of this MountSnapshots.  # noqa: E501


        :return: The mount_id of this MountSnapshots.  # noqa: E501
        :rtype: str
        """
        return self._mount_id

    @mount_id.setter
    def mount_id(self, mount_id):
        """Sets the mount_id of this MountSnapshots.


        :param mount_id: The mount_id of this MountSnapshots.  # noqa: E501
        :type: str
        """
        if mount_id is None:
            raise ValueError("Invalid value for `mount_id`, must not be `None`")  # noqa: E501

        self._mount_id = mount_id

    @property
    def mount_name(self):
        """Gets the mount_name of this MountSnapshots.  # noqa: E501


        :return: The mount_name of this MountSnapshots.  # noqa: E501
        :rtype: str
        """
        return self._mount_name

    @mount_name.setter
    def mount_name(self, mount_name):
        """Sets the mount_name of this MountSnapshots.


        :param mount_name: The mount_name of this MountSnapshots.  # noqa: E501
        :type: str
        """
        if mount_name is None:
            raise ValueError("Invalid value for `mount_name`, must not be `None`")  # noqa: E501

        self._mount_name = mount_name

    @property
    def mount_space_total(self):
        """Gets the mount_space_total of this MountSnapshots.  # noqa: E501


        :return: The mount_space_total of this MountSnapshots.  # noqa: E501
        :rtype: int
        """
        return self._mount_space_total

    @mount_space_total.setter
    def mount_space_total(self, mount_space_total):
        """Sets the mount_space_total of this MountSnapshots.


        :param mount_space_total: The mount_space_total of this MountSnapshots.  # noqa: E501
        :type: int
        """
        if mount_space_total is None:
            raise ValueError("Invalid value for `mount_space_total`, must not be `None`")  # noqa: E501

        self._mount_space_total = mount_space_total

    @property
    def snapshots(self):
        """Gets the snapshots of this MountSnapshots.  # noqa: E501


        :return: The snapshots of this MountSnapshots.  # noqa: E501
        :rtype: list[Snapshot]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this MountSnapshots.


        :param snapshots: The snapshots of this MountSnapshots.  # noqa: E501
        :type: list[Snapshot]
        """
        if snapshots is None:
            raise ValueError("Invalid value for `snapshots`, must not be `None`")  # noqa: E501

        self._snapshots = snapshots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountSnapshots, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountSnapshots):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
