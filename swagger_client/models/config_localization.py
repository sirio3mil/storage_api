# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigLocalization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'help_language': 'str',
        'language': 'str',
        'languages': 'list[ConfigLocalizationLanguage]'
    }

    attribute_map = {
        'help_language': 'helpLanguage',
        'language': 'language',
        'languages': 'languages'
    }

    def __init__(self, help_language=None, language=None, languages=None):  # noqa: E501
        """ConfigLocalization - a model defined in Swagger"""  # noqa: E501
        self._help_language = None
        self._language = None
        self._languages = None
        self.discriminator = None
        self.help_language = help_language
        self.language = language
        self.languages = languages

    @property
    def help_language(self):
        """Gets the help_language of this ConfigLocalization.  # noqa: E501

        HelpLanguage is the language for the help pages.  # noqa: E501

        :return: The help_language of this ConfigLocalization.  # noqa: E501
        :rtype: str
        """
        return self._help_language

    @help_language.setter
    def help_language(self, help_language):
        """Sets the help_language of this ConfigLocalization.

        HelpLanguage is the language for the help pages.  # noqa: E501

        :param help_language: The help_language of this ConfigLocalization.  # noqa: E501
        :type: str
        """
        if help_language is None:
            raise ValueError("Invalid value for `help_language`, must not be `None`")  # noqa: E501

        self._help_language = help_language

    @property
    def language(self):
        """Gets the language of this ConfigLocalization.  # noqa: E501

        Language is the current language code. If user did not set a preferred language, Accept-Language HTTP header is used for default language detection.  # noqa: E501

        :return: The language of this ConfigLocalization.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ConfigLocalization.

        Language is the current language code. If user did not set a preferred language, Accept-Language HTTP header is used for default language detection.  # noqa: E501

        :param language: The language of this ConfigLocalization.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def languages(self):
        """Gets the languages of this ConfigLocalization.  # noqa: E501

        Languages is a list of languages for the web application.  # noqa: E501

        :return: The languages of this ConfigLocalization.  # noqa: E501
        :rtype: list[ConfigLocalizationLanguage]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ConfigLocalization.

        Languages is a list of languages for the web application.  # noqa: E501

        :param languages: The languages of this ConfigLocalization.  # noqa: E501
        :type: list[ConfigLocalizationLanguage]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")  # noqa: E501

        self._languages = languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigLocalization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigLocalization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
