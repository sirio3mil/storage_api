# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'ConfigAssets',
        'branding': 'ConfigBranding',
        'chrome_extension': 'ConfigChromeExtension',
        'email_change': 'ConfigEmailChange',
        'external': 'ConfigExternal',
        'extra': 'dict(str, object)',
        'feature_flags': 'ConfigFeatureFlags',
        'frontend': 'ConfigFrontend',
        'groups': 'ConfigGroups',
        'localization': 'ConfigLocalization',
        'logout': 'ConfigLogout',
        'mobile': 'ConfigMobile',
        'mobile_apps': 'ConfigMobileApps',
        'oauth2': 'ConfigOAuth2',
        'office': 'ConfigOffice',
        'password_change': 'ConfigPasswordChange',
        'product': 'ConfigProduct',
        'search': 'ConfigSearch',
        'snapshots': 'ConfigSnapshots',
        'storage_downloader': 'ConfigStorageDownloader',
        'templates': 'ConfigTemplates',
        'trash': 'ConfigTrash',
        'user': 'ConfigUser',
        'viewer': 'ConfigViewer'
    }

    attribute_map = {
        'assets': 'assets',
        'branding': 'branding',
        'chrome_extension': 'chromeExtension',
        'email_change': 'emailChange',
        'external': 'external',
        'extra': 'extra',
        'feature_flags': 'featureFlags',
        'frontend': 'frontend',
        'groups': 'groups',
        'localization': 'localization',
        'logout': 'logout',
        'mobile': 'mobile',
        'mobile_apps': 'mobileApps',
        'oauth2': 'oauth2',
        'office': 'office',
        'password_change': 'passwordChange',
        'product': 'product',
        'search': 'search',
        'snapshots': 'snapshots',
        'storage_downloader': 'storageDownloader',
        'templates': 'templates',
        'trash': 'trash',
        'user': 'user',
        'viewer': 'viewer'
    }

    def __init__(self, assets=None, branding=None, chrome_extension=None, email_change=None, external=None, extra=None, feature_flags=None, frontend=None, groups=None, localization=None, logout=None, mobile=None, mobile_apps=None, oauth2=None, office=None, password_change=None, product=None, search=None, snapshots=None, storage_downloader=None, templates=None, trash=None, user=None, viewer=None):  # noqa: E501
        """AppConfig - a model defined in Swagger"""  # noqa: E501
        self._assets = None
        self._branding = None
        self._chrome_extension = None
        self._email_change = None
        self._external = None
        self._extra = None
        self._feature_flags = None
        self._frontend = None
        self._groups = None
        self._localization = None
        self._logout = None
        self._mobile = None
        self._mobile_apps = None
        self._oauth2 = None
        self._office = None
        self._password_change = None
        self._product = None
        self._search = None
        self._snapshots = None
        self._storage_downloader = None
        self._templates = None
        self._trash = None
        self._user = None
        self._viewer = None
        self.discriminator = None
        self.assets = assets
        self.branding = branding
        self.chrome_extension = chrome_extension
        self.email_change = email_change
        self.external = external
        self.extra = extra
        self.feature_flags = feature_flags
        self.frontend = frontend
        self.groups = groups
        self.localization = localization
        self.logout = logout
        self.mobile = mobile
        self.mobile_apps = mobile_apps
        self.oauth2 = oauth2
        self.office = office
        self.password_change = password_change
        self.product = product
        self.search = search
        self.snapshots = snapshots
        self.storage_downloader = storage_downloader
        self.templates = templates
        self.trash = trash
        self.user = user
        self.viewer = viewer

    @property
    def assets(self):
        """Gets the assets of this AppConfig.  # noqa: E501


        :return: The assets of this AppConfig.  # noqa: E501
        :rtype: ConfigAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this AppConfig.


        :param assets: The assets of this AppConfig.  # noqa: E501
        :type: ConfigAssets
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501

        self._assets = assets

    @property
    def branding(self):
        """Gets the branding of this AppConfig.  # noqa: E501


        :return: The branding of this AppConfig.  # noqa: E501
        :rtype: ConfigBranding
        """
        return self._branding

    @branding.setter
    def branding(self, branding):
        """Sets the branding of this AppConfig.


        :param branding: The branding of this AppConfig.  # noqa: E501
        :type: ConfigBranding
        """
        if branding is None:
            raise ValueError("Invalid value for `branding`, must not be `None`")  # noqa: E501

        self._branding = branding

    @property
    def chrome_extension(self):
        """Gets the chrome_extension of this AppConfig.  # noqa: E501


        :return: The chrome_extension of this AppConfig.  # noqa: E501
        :rtype: ConfigChromeExtension
        """
        return self._chrome_extension

    @chrome_extension.setter
    def chrome_extension(self, chrome_extension):
        """Sets the chrome_extension of this AppConfig.


        :param chrome_extension: The chrome_extension of this AppConfig.  # noqa: E501
        :type: ConfigChromeExtension
        """
        if chrome_extension is None:
            raise ValueError("Invalid value for `chrome_extension`, must not be `None`")  # noqa: E501

        self._chrome_extension = chrome_extension

    @property
    def email_change(self):
        """Gets the email_change of this AppConfig.  # noqa: E501


        :return: The email_change of this AppConfig.  # noqa: E501
        :rtype: ConfigEmailChange
        """
        return self._email_change

    @email_change.setter
    def email_change(self, email_change):
        """Sets the email_change of this AppConfig.


        :param email_change: The email_change of this AppConfig.  # noqa: E501
        :type: ConfigEmailChange
        """
        if email_change is None:
            raise ValueError("Invalid value for `email_change`, must not be `None`")  # noqa: E501

        self._email_change = email_change

    @property
    def external(self):
        """Gets the external of this AppConfig.  # noqa: E501


        :return: The external of this AppConfig.  # noqa: E501
        :rtype: ConfigExternal
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this AppConfig.


        :param external: The external of this AppConfig.  # noqa: E501
        :type: ConfigExternal
        """
        if external is None:
            raise ValueError("Invalid value for `external`, must not be `None`")  # noqa: E501

        self._external = external

    @property
    def extra(self):
        """Gets the extra of this AppConfig.  # noqa: E501

        Extra contains extra settings.  # noqa: E501

        :return: The extra of this AppConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this AppConfig.

        Extra contains extra settings.  # noqa: E501

        :param extra: The extra of this AppConfig.  # noqa: E501
        :type: dict(str, object)
        """
        if extra is None:
            raise ValueError("Invalid value for `extra`, must not be `None`")  # noqa: E501

        self._extra = extra

    @property
    def feature_flags(self):
        """Gets the feature_flags of this AppConfig.  # noqa: E501


        :return: The feature_flags of this AppConfig.  # noqa: E501
        :rtype: ConfigFeatureFlags
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this AppConfig.


        :param feature_flags: The feature_flags of this AppConfig.  # noqa: E501
        :type: ConfigFeatureFlags
        """
        if feature_flags is None:
            raise ValueError("Invalid value for `feature_flags`, must not be `None`")  # noqa: E501

        self._feature_flags = feature_flags

    @property
    def frontend(self):
        """Gets the frontend of this AppConfig.  # noqa: E501


        :return: The frontend of this AppConfig.  # noqa: E501
        :rtype: ConfigFrontend
        """
        return self._frontend

    @frontend.setter
    def frontend(self, frontend):
        """Sets the frontend of this AppConfig.


        :param frontend: The frontend of this AppConfig.  # noqa: E501
        :type: ConfigFrontend
        """
        if frontend is None:
            raise ValueError("Invalid value for `frontend`, must not be `None`")  # noqa: E501

        self._frontend = frontend

    @property
    def groups(self):
        """Gets the groups of this AppConfig.  # noqa: E501


        :return: The groups of this AppConfig.  # noqa: E501
        :rtype: ConfigGroups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this AppConfig.


        :param groups: The groups of this AppConfig.  # noqa: E501
        :type: ConfigGroups
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")  # noqa: E501

        self._groups = groups

    @property
    def localization(self):
        """Gets the localization of this AppConfig.  # noqa: E501


        :return: The localization of this AppConfig.  # noqa: E501
        :rtype: ConfigLocalization
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this AppConfig.


        :param localization: The localization of this AppConfig.  # noqa: E501
        :type: ConfigLocalization
        """
        if localization is None:
            raise ValueError("Invalid value for `localization`, must not be `None`")  # noqa: E501

        self._localization = localization

    @property
    def logout(self):
        """Gets the logout of this AppConfig.  # noqa: E501


        :return: The logout of this AppConfig.  # noqa: E501
        :rtype: ConfigLogout
        """
        return self._logout

    @logout.setter
    def logout(self, logout):
        """Sets the logout of this AppConfig.


        :param logout: The logout of this AppConfig.  # noqa: E501
        :type: ConfigLogout
        """
        if logout is None:
            raise ValueError("Invalid value for `logout`, must not be `None`")  # noqa: E501

        self._logout = logout

    @property
    def mobile(self):
        """Gets the mobile of this AppConfig.  # noqa: E501


        :return: The mobile of this AppConfig.  # noqa: E501
        :rtype: ConfigMobile
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this AppConfig.


        :param mobile: The mobile of this AppConfig.  # noqa: E501
        :type: ConfigMobile
        """
        if mobile is None:
            raise ValueError("Invalid value for `mobile`, must not be `None`")  # noqa: E501

        self._mobile = mobile

    @property
    def mobile_apps(self):
        """Gets the mobile_apps of this AppConfig.  # noqa: E501


        :return: The mobile_apps of this AppConfig.  # noqa: E501
        :rtype: ConfigMobileApps
        """
        return self._mobile_apps

    @mobile_apps.setter
    def mobile_apps(self, mobile_apps):
        """Sets the mobile_apps of this AppConfig.


        :param mobile_apps: The mobile_apps of this AppConfig.  # noqa: E501
        :type: ConfigMobileApps
        """
        if mobile_apps is None:
            raise ValueError("Invalid value for `mobile_apps`, must not be `None`")  # noqa: E501

        self._mobile_apps = mobile_apps

    @property
    def oauth2(self):
        """Gets the oauth2 of this AppConfig.  # noqa: E501


        :return: The oauth2 of this AppConfig.  # noqa: E501
        :rtype: ConfigOAuth2
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this AppConfig.


        :param oauth2: The oauth2 of this AppConfig.  # noqa: E501
        :type: ConfigOAuth2
        """
        if oauth2 is None:
            raise ValueError("Invalid value for `oauth2`, must not be `None`")  # noqa: E501

        self._oauth2 = oauth2

    @property
    def office(self):
        """Gets the office of this AppConfig.  # noqa: E501


        :return: The office of this AppConfig.  # noqa: E501
        :rtype: ConfigOffice
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this AppConfig.


        :param office: The office of this AppConfig.  # noqa: E501
        :type: ConfigOffice
        """
        if office is None:
            raise ValueError("Invalid value for `office`, must not be `None`")  # noqa: E501

        self._office = office

    @property
    def password_change(self):
        """Gets the password_change of this AppConfig.  # noqa: E501


        :return: The password_change of this AppConfig.  # noqa: E501
        :rtype: ConfigPasswordChange
        """
        return self._password_change

    @password_change.setter
    def password_change(self, password_change):
        """Sets the password_change of this AppConfig.


        :param password_change: The password_change of this AppConfig.  # noqa: E501
        :type: ConfigPasswordChange
        """
        if password_change is None:
            raise ValueError("Invalid value for `password_change`, must not be `None`")  # noqa: E501

        self._password_change = password_change

    @property
    def product(self):
        """Gets the product of this AppConfig.  # noqa: E501


        :return: The product of this AppConfig.  # noqa: E501
        :rtype: ConfigProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AppConfig.


        :param product: The product of this AppConfig.  # noqa: E501
        :type: ConfigProduct
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def search(self):
        """Gets the search of this AppConfig.  # noqa: E501


        :return: The search of this AppConfig.  # noqa: E501
        :rtype: ConfigSearch
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this AppConfig.


        :param search: The search of this AppConfig.  # noqa: E501
        :type: ConfigSearch
        """
        if search is None:
            raise ValueError("Invalid value for `search`, must not be `None`")  # noqa: E501

        self._search = search

    @property
    def snapshots(self):
        """Gets the snapshots of this AppConfig.  # noqa: E501


        :return: The snapshots of this AppConfig.  # noqa: E501
        :rtype: ConfigSnapshots
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this AppConfig.


        :param snapshots: The snapshots of this AppConfig.  # noqa: E501
        :type: ConfigSnapshots
        """
        if snapshots is None:
            raise ValueError("Invalid value for `snapshots`, must not be `None`")  # noqa: E501

        self._snapshots = snapshots

    @property
    def storage_downloader(self):
        """Gets the storage_downloader of this AppConfig.  # noqa: E501


        :return: The storage_downloader of this AppConfig.  # noqa: E501
        :rtype: ConfigStorageDownloader
        """
        return self._storage_downloader

    @storage_downloader.setter
    def storage_downloader(self, storage_downloader):
        """Sets the storage_downloader of this AppConfig.


        :param storage_downloader: The storage_downloader of this AppConfig.  # noqa: E501
        :type: ConfigStorageDownloader
        """
        if storage_downloader is None:
            raise ValueError("Invalid value for `storage_downloader`, must not be `None`")  # noqa: E501

        self._storage_downloader = storage_downloader

    @property
    def templates(self):
        """Gets the templates of this AppConfig.  # noqa: E501


        :return: The templates of this AppConfig.  # noqa: E501
        :rtype: ConfigTemplates
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this AppConfig.


        :param templates: The templates of this AppConfig.  # noqa: E501
        :type: ConfigTemplates
        """
        if templates is None:
            raise ValueError("Invalid value for `templates`, must not be `None`")  # noqa: E501

        self._templates = templates

    @property
    def trash(self):
        """Gets the trash of this AppConfig.  # noqa: E501


        :return: The trash of this AppConfig.  # noqa: E501
        :rtype: ConfigTrash
        """
        return self._trash

    @trash.setter
    def trash(self, trash):
        """Sets the trash of this AppConfig.


        :param trash: The trash of this AppConfig.  # noqa: E501
        :type: ConfigTrash
        """
        if trash is None:
            raise ValueError("Invalid value for `trash`, must not be `None`")  # noqa: E501

        self._trash = trash

    @property
    def user(self):
        """Gets the user of this AppConfig.  # noqa: E501


        :return: The user of this AppConfig.  # noqa: E501
        :rtype: ConfigUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AppConfig.


        :param user: The user of this AppConfig.  # noqa: E501
        :type: ConfigUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def viewer(self):
        """Gets the viewer of this AppConfig.  # noqa: E501


        :return: The viewer of this AppConfig.  # noqa: E501
        :rtype: ConfigViewer
        """
        return self._viewer

    @viewer.setter
    def viewer(self, viewer):
        """Sets the viewer of this AppConfig.


        :param viewer: The viewer of this AppConfig.  # noqa: E501
        :type: ConfigViewer
        """
        if viewer is None:
            raise ValueError("Invalid value for `viewer`, must not be `None`")  # noqa: E501

        self._viewer = viewer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
