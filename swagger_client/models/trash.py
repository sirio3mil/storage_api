# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Trash(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files': 'list[TrashFile]',
        'mounts': 'dict(str, Mount)',
        'page_info': 'TrashPageInfo',
        'retention_days': 'int'
    }

    attribute_map = {
        'files': 'files',
        'mounts': 'mounts',
        'page_info': 'pageInfo',
        'retention_days': 'retentionDays'
    }

    def __init__(self, files=None, mounts=None, page_info=None, retention_days=None):  # noqa: E501
        """Trash - a model defined in Swagger"""  # noqa: E501
        self._files = None
        self._mounts = None
        self._page_info = None
        self._retention_days = None
        self.discriminator = None
        self.files = files
        self.mounts = mounts
        self.page_info = page_info
        self.retention_days = retention_days

    @property
    def files(self):
        """Gets the files of this Trash.  # noqa: E501


        :return: The files of this Trash.  # noqa: E501
        :rtype: list[TrashFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Trash.


        :param files: The files of this Trash.  # noqa: E501
        :type: list[TrashFile]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def mounts(self):
        """Gets the mounts of this Trash.  # noqa: E501


        :return: The mounts of this Trash.  # noqa: E501
        :rtype: dict(str, Mount)
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this Trash.


        :param mounts: The mounts of this Trash.  # noqa: E501
        :type: dict(str, Mount)
        """
        if mounts is None:
            raise ValueError("Invalid value for `mounts`, must not be `None`")  # noqa: E501

        self._mounts = mounts

    @property
    def page_info(self):
        """Gets the page_info of this Trash.  # noqa: E501


        :return: The page_info of this Trash.  # noqa: E501
        :rtype: TrashPageInfo
        """
        return self._page_info

    @page_info.setter
    def page_info(self, page_info):
        """Sets the page_info of this Trash.


        :param page_info: The page_info of this Trash.  # noqa: E501
        :type: TrashPageInfo
        """
        if page_info is None:
            raise ValueError("Invalid value for `page_info`, must not be `None`")  # noqa: E501

        self._page_info = page_info

    @property
    def retention_days(self):
        """Gets the retention_days of this Trash.  # noqa: E501


        :return: The retention_days of this Trash.  # noqa: E501
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this Trash.


        :param retention_days: The retention_days of this Trash.  # noqa: E501
        :type: int
        """
        if retention_days is None:
            raise ValueError("Invalid value for `retention_days`, must not be `None`")  # noqa: E501

        self._retention_days = retention_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trash, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trash):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
