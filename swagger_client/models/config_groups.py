# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigGroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_user_url': 'str',
        'buy_resources_url': 'str',
        'can_change_space': 'bool',
        'can_change_users': 'bool',
        'enabled': 'bool'
    }

    attribute_map = {
        'add_user_url': 'addUserUrl',
        'buy_resources_url': 'buyResourcesUrl',
        'can_change_space': 'canChangeSpace',
        'can_change_users': 'canChangeUsers',
        'enabled': 'enabled'
    }

    def __init__(self, add_user_url=None, buy_resources_url=None, can_change_space=None, can_change_users=None, enabled=None):  # noqa: E501
        """ConfigGroups - a model defined in Swagger"""  # noqa: E501
        self._add_user_url = None
        self._buy_resources_url = None
        self._can_change_space = None
        self._can_change_users = None
        self._enabled = None
        self.discriminator = None
        if add_user_url is not None:
            self.add_user_url = add_user_url
        if buy_resources_url is not None:
            self.buy_resources_url = buy_resources_url
        self.can_change_space = can_change_space
        self.can_change_users = can_change_users
        self.enabled = enabled

    @property
    def add_user_url(self):
        """Gets the add_user_url of this ConfigGroups.  # noqa: E501

        AddUserUrl contains a custom URL for adding users.  # noqa: E501

        :return: The add_user_url of this ConfigGroups.  # noqa: E501
        :rtype: str
        """
        return self._add_user_url

    @add_user_url.setter
    def add_user_url(self, add_user_url):
        """Sets the add_user_url of this ConfigGroups.

        AddUserUrl contains a custom URL for adding users.  # noqa: E501

        :param add_user_url: The add_user_url of this ConfigGroups.  # noqa: E501
        :type: str
        """

        self._add_user_url = add_user_url

    @property
    def buy_resources_url(self):
        """Gets the buy_resources_url of this ConfigGroups.  # noqa: E501

        BuyResourcesUrl contains a custom URL for buying more resources.  # noqa: E501

        :return: The buy_resources_url of this ConfigGroups.  # noqa: E501
        :rtype: str
        """
        return self._buy_resources_url

    @buy_resources_url.setter
    def buy_resources_url(self, buy_resources_url):
        """Sets the buy_resources_url of this ConfigGroups.

        BuyResourcesUrl contains a custom URL for buying more resources.  # noqa: E501

        :param buy_resources_url: The buy_resources_url of this ConfigGroups.  # noqa: E501
        :type: str
        """

        self._buy_resources_url = buy_resources_url

    @property
    def can_change_space(self):
        """Gets the can_change_space of this ConfigGroups.  # noqa: E501

        CanChangeSpace defines whether space can be assigned/modified for group users.  # noqa: E501

        :return: The can_change_space of this ConfigGroups.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_space

    @can_change_space.setter
    def can_change_space(self, can_change_space):
        """Sets the can_change_space of this ConfigGroups.

        CanChangeSpace defines whether space can be assigned/modified for group users.  # noqa: E501

        :param can_change_space: The can_change_space of this ConfigGroups.  # noqa: E501
        :type: bool
        """
        if can_change_space is None:
            raise ValueError("Invalid value for `can_change_space`, must not be `None`")  # noqa: E501

        self._can_change_space = can_change_space

    @property
    def can_change_users(self):
        """Gets the can_change_users of this ConfigGroups.  # noqa: E501

        CanChangeUsers defines whether group users can be modified.  # noqa: E501

        :return: The can_change_users of this ConfigGroups.  # noqa: E501
        :rtype: bool
        """
        return self._can_change_users

    @can_change_users.setter
    def can_change_users(self, can_change_users):
        """Sets the can_change_users of this ConfigGroups.

        CanChangeUsers defines whether group users can be modified.  # noqa: E501

        :param can_change_users: The can_change_users of this ConfigGroups.  # noqa: E501
        :type: bool
        """
        if can_change_users is None:
            raise ValueError("Invalid value for `can_change_users`, must not be `None`")  # noqa: E501

        self._can_change_users = can_change_users

    @property
    def enabled(self):
        """Gets the enabled of this ConfigGroups.  # noqa: E501

        Enabled defines whether groups are enabled.  # noqa: E501

        :return: The enabled of this ConfigGroups.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConfigGroups.

        Enabled defines whether groups are enabled.  # noqa: E501

        :param enabled: The enabled of this ConfigGroups.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigGroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
