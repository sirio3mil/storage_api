# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserSettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def settings_language(self, **kwargs):  # noqa: E501
        """Get current preferred language  # noqa: E501

        Get current preferred language. `User / App config` endpoint should be used for the current language (preferred, detected or default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_language(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsLanguage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_language_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_language_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_language_with_http_info(self, **kwargs):  # noqa: E501
        """Get current preferred language  # noqa: E501

        Get current preferred language. `User / App config` endpoint should be used for the current language (preferred, detected or default).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_language_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsLanguage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_language" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/language', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsLanguage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_language_edit(self, **kwargs):  # noqa: E501
        """Update current preferred language  # noqa: E501

        Set current preferred language. Valid languages can be obtained using `User / App config` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_language_edit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsLanguage body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_language_edit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_language_edit_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_language_edit_with_http_info(self, **kwargs):  # noqa: E501
        """Update current preferred language  # noqa: E501

        Set current preferred language. Valid languages can be obtained using `User / App config` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_language_edit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsLanguage body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_language_edit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/language', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_notifications(self, **kwargs):  # noqa: E501
        """Get notifications settings  # noqa: E501

        Notification settings control whether the user wants to receive an email when new files are shared or a new comment is posted. Device offline setting is deprecated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_notifications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsNotifications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_notifications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_notifications_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_notifications_with_http_info(self, **kwargs):  # noqa: E501
        """Get notifications settings  # noqa: E501

        Notification settings control whether the user wants to receive an email when new files are shared or a new comment is posted. Device offline setting is deprecated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_notifications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsNotifications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_notifications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsNotifications',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_notifications_edit(self, **kwargs):  # noqa: E501
        """Update notification settings  # noqa: E501

        Notification settings control whether the user wants to receive an email when new files are shared or a new comment is posted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_notifications_edit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsNotifications body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_notifications_edit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_notifications_edit_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_notifications_edit_with_http_info(self, **kwargs):  # noqa: E501
        """Update notification settings  # noqa: E501

        Notification settings control whether the user wants to receive an email when new files are shared or a new comment is posted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_notifications_edit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsNotifications body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_notifications_edit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/notifications', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_security(self, **kwargs):  # noqa: E501
        """Get security settings  # noqa: E501

        Security settings are used to control automatic or mandatory passwords for links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_security(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_security_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_security_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_security_with_http_info(self, **kwargs):  # noqa: E501
        """Get security settings  # noqa: E501

        Security settings are used to control automatic or mandatory passwords for links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_security_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_security" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/security', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsSecurity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_security_edit(self, **kwargs):  # noqa: E501
        """Update security settings  # noqa: E501

        Security settings are used to control automatic or mandatory passwords for links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_security_edit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsSecurity body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_security_edit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_security_edit_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_security_edit_with_http_info(self, **kwargs):  # noqa: E501
        """Update security settings  # noqa: E501

        Security settings are used to control automatic or mandatory passwords for links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_security_edit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsSecurity body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_security_edit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/security', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_seen(self, **kwargs):  # noqa: E501
        """Get seen settings  # noqa: E501

        Seen settings are used for saving whether the current user has already seen the web Intro or Desktop app tip.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_seen(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsSeen
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_seen_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_seen_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_seen_with_http_info(self, **kwargs):  # noqa: E501
        """Get seen settings  # noqa: E501

        Seen settings are used for saving whether the current user has already seen the web Intro or Desktop app tip.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_seen_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsSeen
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_seen" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/seen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsSeen',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def settings_seen_edit(self, **kwargs):  # noqa: E501
        """Update seen settings  # noqa: E501

        Seen settings are used for saving whether the current user has already seen the web Intro or Desktop app tip. For partial updates non-changed fields should be `null`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_seen_edit(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsSeen body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.settings_seen_edit_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.settings_seen_edit_with_http_info(**kwargs)  # noqa: E501
            return data

    def settings_seen_edit_with_http_info(self, **kwargs):  # noqa: E501
        """Update seen settings  # noqa: E501

        Seen settings are used for saving whether the current user has already seen the web Intro or Desktop app tip. For partial updates non-changed fields should be `null`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.settings_seen_edit_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsSeen body: New settings
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method settings_seen_edit" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/user/settings/seen', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
