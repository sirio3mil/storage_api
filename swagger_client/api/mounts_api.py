# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def mounts(self, **kwargs):  # noqa: E501
        """List of places and shared folders.  # noqa: E501

        Deprecated. Use Places or Shared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Mounts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.mounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def mounts_with_http_info(self, **kwargs):  # noqa: E501
        """List of places and shared folders.  # noqa: E501

        Deprecated. Use Places or Shared.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Mounts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mounts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_delete(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_delete(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_delete_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_delete_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def mounts_delete_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_delete_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_details(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_details(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: Mount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_details_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_details_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def mounts_details_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_details_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: Mount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_edit(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_edit(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param MountEdit body: TODO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_edit_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_edit_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def mounts_edit_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_edit_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param MountEdit body: TODO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_groups_add(self, mount_id, mount_group_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_groups_add(mount_id, mount_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_group_id: (required)
        :param MountGroupCreate body: TODO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_groups_add_with_http_info(mount_id, mount_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_groups_add_with_http_info(mount_id, mount_group_id, **kwargs)  # noqa: E501
            return data

    def mounts_groups_add_with_http_info(self, mount_id, mount_group_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_groups_add_with_http_info(mount_id, mount_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_group_id: (required)
        :param MountGroupCreate body: TODO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'mount_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_groups_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_groups_add`")  # noqa: E501
        # verify the required parameter 'mount_group_id' is set
        if ('mount_group_id' not in params or
                params['mount_group_id'] is None):
            raise ValueError("Missing the required parameter `mount_group_id` when calling `mounts_groups_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'mount_group_id' in params:
            path_params['mountGroupId'] = params['mount_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/groups/{mountGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_groups_remove(self, mount_id, mount_group_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_groups_remove(mount_id, mount_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_groups_remove_with_http_info(mount_id, mount_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_groups_remove_with_http_info(mount_id, mount_group_id, **kwargs)  # noqa: E501
            return data

    def mounts_groups_remove_with_http_info(self, mount_id, mount_group_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_groups_remove_with_http_info(mount_id, mount_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_group_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'mount_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_groups_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_groups_remove`")  # noqa: E501
        # verify the required parameter 'mount_group_id' is set
        if ('mount_group_id' not in params or
                params['mount_group_id'] is None):
            raise ValueError("Missing the required parameter `mount_group_id` when calling `mounts_groups_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'mount_group_id' in params:
            path_params['mountGroupId'] = params['mount_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/groups/{mountGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_reauth(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_reauth(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_reauth_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_reauth_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def mounts_reauth_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_reauth_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_reauth" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_reauth`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/reauth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_submounts_create(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_submounts_create(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param MountCreate body: TODO
        :return: Mount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_submounts_create_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_submounts_create_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def mounts_submounts_create_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_submounts_create_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param MountCreate body: TODO
        :return: Mount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_submounts_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_submounts_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/submounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_users_add(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_users_add(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param MountUserCreate body: TODO
        :return: MountUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_users_add_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_users_add_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def mounts_users_add_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_users_add_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param MountUserCreate body: TODO
        :return: MountUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_users_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_users_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MountUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_users_edit(self, mount_id, mount_user_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_users_edit(mount_id, mount_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_user_id: (required)
        :param MountUserEdit body: TODO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_users_edit_with_http_info(mount_id, mount_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_users_edit_with_http_info(mount_id, mount_user_id, **kwargs)  # noqa: E501
            return data

    def mounts_users_edit_with_http_info(self, mount_id, mount_user_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_users_edit_with_http_info(mount_id, mount_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_user_id: (required)
        :param MountUserEdit body: TODO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'mount_user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_users_edit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_users_edit`")  # noqa: E501
        # verify the required parameter 'mount_user_id' is set
        if ('mount_user_id' not in params or
                params['mount_user_id'] is None):
            raise ValueError("Missing the required parameter `mount_user_id` when calling `mounts_users_edit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'mount_user_id' in params:
            path_params['mountUserId'] = params['mount_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/users/{mountUserId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mounts_users_remove(self, mount_id, mount_user_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_users_remove(mount_id, mount_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mounts_users_remove_with_http_info(mount_id, mount_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mounts_users_remove_with_http_info(mount_id, mount_user_id, **kwargs)  # noqa: E501
            return data

    def mounts_users_remove_with_http_info(self, mount_id, mount_user_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mounts_users_remove_with_http_info(mount_id, mount_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str mount_user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'mount_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mounts_users_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `mounts_users_remove`")  # noqa: E501
        # verify the required parameter 'mount_user_id' is set
        if ('mount_user_id' not in params or
                params['mount_user_id'] is None):
            raise ValueError("Missing the required parameter `mount_user_id` when calling `mounts_users_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'mount_user_id' in params:
            path_params['mountUserId'] = params['mount_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/users/{mountUserId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
