# coding: utf-8

"""
    DIGI storage API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MountsLinksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def links(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def links_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_counter(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_counter(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: LinkCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_counter_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_counter_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_counter_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_counter_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: LinkCounter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_counter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_counter`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_counter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/counter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LinkCounter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_create(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_create(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param LinkCreate body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_create_with_http_info(mount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_create_with_http_info(mount_id, **kwargs)  # noqa: E501
            return data

    def links_create_with_http_info(self, mount_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_create_with_http_info(mount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param LinkCreate body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_delete(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_delete(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_delete_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_delete_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_delete_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_delete_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_delete`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_details(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_details(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_details_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_details_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_details_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_details_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_details`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_remove_password(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_remove_password(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_remove_password_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_remove_password_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_remove_password_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_remove_password_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_remove_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_remove_password`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_remove_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/password', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_reset_password(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_reset_password(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_reset_password_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_reset_password_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_reset_password_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_reset_password_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_reset_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_reset_password`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_reset_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/password/reset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_set_message(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_message(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkMessage body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_set_message_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_set_message_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_set_message_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_message_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkMessage body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_set_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_set_message`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_set_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/message', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_set_password(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_password(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkSetPassword body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_set_password_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_set_password_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_set_password_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_password_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkSetPassword body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_set_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_set_password`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_set_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/password/set', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_set_url_hash(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_url_hash(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkSetHash body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_set_url_hash_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_set_url_hash_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_set_url_hash_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_url_hash_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkSetHash body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_set_url_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_set_url_hash`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_set_url_hash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/urlHash', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def links_set_validity(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_validity(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkValidity body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.links_set_validity_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.links_set_validity_with_http_info(mount_id, link_id, **kwargs)  # noqa: E501
            return data

    def links_set_validity_with_http_info(self, mount_id, link_id, **kwargs):  # noqa: E501
        """TODO  # noqa: E501

        TODO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.links_set_validity_with_http_info(mount_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mount_id: (required)
        :param str link_id: (required)
        :param LinkValidity body: TODO
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mount_id', 'link_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method links_set_validity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mount_id' is set
        if ('mount_id' not in params or
                params['mount_id'] is None):
            raise ValueError("Missing the required parameter `mount_id` when calling `links_set_validity`")  # noqa: E501
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params or
                params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `links_set_validity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mount_id' in params:
            path_params['mountId'] = params['mount_id']  # noqa: E501
        if 'link_id' in params:
            path_params['linkId'] = params['link_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['appPassword', 'bearer', 'oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2.1/mounts/{mountId}/links/{linkId}/validity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Link',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
